mixin style(href)
  link(rel = 'stylesheet' type = 'text/css' href = href)&attributes(attributes)

mixin zoom-in(id)
  input.zoom-in(
    id = (id || 'default-zoom-in')
    name = 'zoom-in'
    type = 'radio'
    checked = !id
    hidden
  )&attributes(attributes)

mixin zoom-out-button
  label.zoom-out-button(for = 'default-zoom-in')&attributes(attributes)
    block

mixin subtitle(level, name, content)
  a.subtitle(name = name href = '#' + name)&attributes(attributes)
    #{'h' + level}.pointer-cursor.heading= content

mixin article(level, name, title, image)
  -
    const {rngString} = getlib('random-string')
    const id = 'checkbox-' + rngString(8)
  // input.zoom-in(id = id type = 'checkbox' hidden)
  +zoom-in(id)
  label.zoom-in-target(for = id)&attributes(attributes): article.horizontal.hang-children
    if image
      +image-container(image)
    .text
      +subtitle(level, name, title)
      block
    +zoom-out-button

mixin image-container(src)
  figure.image-container&attributes(attributes): img.image(src = src)

mixin bgimage-container(url)
  -
    const style = {
      background: `url(${url})`
    }
  figure.bgimage-container&attributes(attributes)
    .bgimage(style = style)

mixin font-icon-container(char, font)
  figure.font-icon-container&attributes(attributes)
    .icon(style = {'font-family': font})= char

mixin icon(url)
  -
    const style = {
      'background-image': `url(${url})`,
      'background-position': 'center',
      'background-size': 'contain',
      'background-repeat': 'no-repeat'
    }
  .icon(style = style)&attributes(attributes)
